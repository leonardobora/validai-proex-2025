name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run TypeScript type checking
      run: npm run check

    - name: Run tests
      run: npm test

    - name: Run tests with coverage
      run: npm run test:coverage

    - name: Upload coverage reports to Codecov
      if: matrix.node-version == '20.x'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  build:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build application
      env:
        # Database configuration
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        PGDATABASE: ${{ secrets.PGDATABASE }}
        PGHOST: ${{ secrets.PGHOST }}
        PGPORT: ${{ secrets.PGPORT }}
        PGUSER: ${{ secrets.PGUSER }}
        PGPASSWORD: ${{ secrets.PGPASSWORD }}
        # Session configuration
        SESSION_SECRET: ${{ secrets.SESSION_SECRET }}
        # Node environment
        NODE_ENV: production
      run: npm run build

    - name: Test application start
      env:
        # Database configuration
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        PGDATABASE: ${{ secrets.PGDATABASE }}
        PGHOST: ${{ secrets.PGHOST }}
        PGPORT: ${{ secrets.PGPORT }}
        PGUSER: ${{ secrets.PGUSER }}
        PGPASSWORD: ${{ secrets.PGPASSWORD }}
        # Session configuration
        SESSION_SECRET: ${{ secrets.SESSION_SECRET }}
        # Node environment
        NODE_ENV: production
      run: |
        # Verify the built application can start without errors
        timeout 10s node dist/index.js || [ $? -eq 124 ]
        echo "âœ… Application starts successfully"

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-files
        path: dist/
        retention-days: 7

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run TypeScript type checking
      run: npm run check
      
    # Add ESLint when available
    # - name: Run ESLint
    #   run: npm run lint

  security:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run security audit
      run: npm audit --audit-level=moderate

    - name: Check for vulnerabilities
      run: npm audit --audit-level=high --production