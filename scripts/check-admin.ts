import { neon } from "@neondatabase/serverless";
import { drizzle } from "drizzle-orm/neon-http";
import { usersTable } from "../shared/schema";
import { eq } from "drizzle-orm";

// Verificar status de admin de um usu√°rio
async function checkAdminStatus(email: string) {
  try {
    // Configurar conex√£o
    if (!process.env.DATABASE_URL) {
      console.error("‚ùå DATABASE_URL n√£o configurada");
      return;
    }

    const sql = neon(process.env.DATABASE_URL);
    const db = drizzle(sql);

    // Buscar usu√°rio por email
    const user = await db
      .select()
      .from(usersTable)
      .where(eq(usersTable.email, email))
      .limit(1);

    if (user.length === 0) {
      console.log(`‚ùå Usu√°rio "${email}" n√£o encontrado no banco de dados`);
      return;
    }

    const foundUser = user[0];
    console.log(`\nüîç Informa√ß√µes do usu√°rio "${email}":`);
    console.log(`üìß Email: ${foundUser.email}`);
    console.log(`üë§ Nome: ${foundUser.name}`);
    console.log(`üÜî ID: ${foundUser.id}`);
    console.log(`üëë Admin: ${foundUser.isAdmin ? '‚úÖ SIM' : '‚ùå N√ÉO'}`);
    console.log(`üìÖ Criado em: ${foundUser.createdAt}`);
    console.log(`üîÑ Atualizado em: ${foundUser.updatedAt}`);

    if (!foundUser.isAdmin) {
      console.log(`\nüí° Para tornar este usu√°rio admin, execute:`);
      console.log(`UPDATE users SET "isAdmin" = true WHERE email = '${email}';`);
    }

  } catch (error) {
    console.error("‚ùå Erro ao verificar usu√°rio:", error);
  }
}

// Executar verifica√ß√£o
const emailToCheck = process.argv[2] || "leo@dev.com";
console.log(`üîç Verificando status de admin para: ${emailToCheck}`);

checkAdminStatus(emailToCheck)
  .then(() => {
    console.log("\n‚úÖ Verifica√ß√£o conclu√≠da");
    process.exit(0);
  })
  .catch((error) => {
    console.error("‚ùå Erro:", error);
    process.exit(1);
  });