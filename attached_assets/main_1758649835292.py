# main.py - Valida√ç FastAPI Application
"""
Valida√ç - Sistema de Verifica√ß√£o de Not√≠cias
Desenvolvido para PROEX IV - IA Aplicada - UniBrasil
"""

from fastapi import FastAPI, Request, HTTPException, Depends
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import HTMLResponse
import uvicorn
import os
from contextlib import asynccontextmanager

from app.api.routes import router as api_router
from app.core.config import get_settings
from app.core.exceptions import ValidationError, VerificationError

# Configura√ß√£o de inicializa√ß√£o
@asynccontextmanager
async def lifespan(app: FastAPI):
    """Gerencia o ciclo de vida da aplica√ß√£o"""
    # Startup
    print("üöÄ Valida√ç iniciando...")
    print("üìã Carregando configura√ß√µes...")
    
    yield
    
    # Shutdown  
    print("üõë Valida√ç finalizando...")

# Cria√ß√£o da aplica√ß√£o FastAPI
app = FastAPI(
    title="Valida√ç - Verificador de Not√≠cias",
    description="Sistema inteligente para verifica√ß√£o de veracidade de not√≠cias e informa√ß√µes",
    version="1.0.0",
    lifespan=lifespan,
    docs_url="/api/docs",
    redoc_url="/api/redoc"
)

# Configura√ß√µes
settings = get_settings()

# CORS Middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Servir arquivos est√°ticos
app.mount("/static", StaticFiles(directory="app/ui/static"), name="static")

# Templates
templates = Jinja2Templates(directory="app/ui/templates")

# Rotas da API
app.include_router(api_router, prefix="/api/v1")

# Handlers de exce√ß√£o
@app.exception_handler(ValidationError)
async def validation_exception_handler(request: Request, exc: ValidationError):
    return {"error": "Erro de valida√ß√£o", "message": str(exc), "status_code": 400}

@app.exception_handler(VerificationError)
async def verification_exception_handler(request: Request, exc: VerificationError):
    return {"error": "Erro de verifica√ß√£o", "message": str(exc), "status_code": 500}

# Rota principal - Interface Web
@app.get("/", response_class=HTMLResponse)
async def home(request: Request):
    """P√°gina principal do Valida√ç"""
    return templates.TemplateResponse("index.html", {
        "request": request,
        "title": "Valida√ç - Verificador de Not√≠cias",
        "description": "Verifique a veracidade de not√≠cias e informa√ß√µes em tempo real"
    })

# Rota de health check
@app.get("/health")
async def health_check():
    """Health check da aplica√ß√£o"""
    return {
        "status": "healthy",
        "service": "Valida√ç",
        "version": "1.0.0",
        "timestamp": settings.get_timestamp()
    }

# Executar aplica√ß√£o
if __name__ == "__main__":
    uvicorn.run(
        "main:app",
        host="0.0.0.0",
        port=int(os.getenv("PORT", 8000)),
        reload=True if os.getenv("REPLIT_ENVIRONMENT") != "production" else False
    )